{"remainingRequest":"F:\\TWINCODE\\twincode-front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\TWINCODE\\twincode-front\\src\\pages\\SessionDetails.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"F:\\TWINCODE\\twincode-front\\src\\pages\\SessionDetails.vue","mtime":1625729624000},{"path":"F:\\TWINCODE\\twincode-front\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\TWINCODE\\twincode-front\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"F:\\TWINCODE\\twincode-front\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"F:\\TWINCODE\\twincode-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\TWINCODE\\twincode-front\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi50eXBld3JpdGVyIGgxIHsKICBvdmVyZmxvdzogaGlkZGVuOyAvKiBFbnN1cmVzIHRoZSBjb250ZW50IGlzIG5vdCByZXZlYWxlZCB1bnRpbCB0aGUgYW5pbWF0aW9uICovCiAgYm9yZGVyLXJpZ2h0OiAuMTVlbSBzb2xpZCBvcmFuZ2U7IC8qIFRoZSB0eXB3cml0ZXIgY3Vyc29yICovCiAgd2hpdGUtc3BhY2U6IG5vd3JhcDsgLyogS2VlcHMgdGhlIGNvbnRlbnQgb24gYSBzaW5nbGUgbGluZSAqLwogIG1hcmdpbjogMCBhdXRvOyAvKiBHaXZlcyB0aGF0IHNjcm9sbGluZyBlZmZlY3QgYXMgdGhlIHR5cGluZyBoYXBwZW5zICovCiAgbGV0dGVyLXNwYWNpbmc6IC4xNWVtOyAvKiBBZGp1c3QgYXMgbmVlZGVkICovCiAgYW5pbWF0aW9uOiAKICAgIHR5cGluZyAzcyBzdGVwcyg1MCwgZW5kKSwKICAgIGJsaW5rLWNhcmV0IC43NXMgc3RlcC1lbmQgaW5maW5pdGU7Cn0KIAovKiBUaGUgdHlwaW5nIGVmZmVjdCAqLwpAa2V5ZnJhbWVzIHR5cGluZyB7CiAgZnJvbSB7IHdpZHRoOiAwIH0KICB0byB7IHdpZHRoOiAxMDAlIH0KfQogCi8qIFRoZSB0eXBld3JpdGVyIGN1cnNvciBlZmZlY3QgKi8KQGtleWZyYW1lcyBibGluay1jYXJldCB7CiAgZnJvbSwgdG8geyBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50IH0KICA1MCUgeyBib3JkZXItY29sb3I6IG9yYW5nZTsgfQp9Cg=="},{"version":3,"sources":["SessionDetails.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"SessionDetails.vue","sourceRoot":"src/pages","sourcesContent":["<template>\n  <div>\n    <Header v-if=\"loggedIn && sessionExists\" />\n    <div v-if=\"loggedIn && sessionExists\" class=\"text-center align-middle\">\n      <div class=\"inline-block w-full max-w-screen-xl\">\n        <div class=\"text-left\">\n          <h1 class=\"p-5 text-2xl md:text-3xl md:ml-3 font-semibold\">\n            Session details\n          </h1>\n        </div>\n      </div>\n      <div class=\"p-3 text-left max-w-4xl mx-auto mb-20 relative\">\n        <label class=\"absolute top-0 right-0 mr-16 text-gray-800\"\n          >Activation toggle:\n        </label>\n        <ToggleSwitch\n          class=\"absolute top-0 right-0 mr-1\"\n          v-model=\"session.active\"\n          @input=\"toggleActivation()\"\n        />\n        <form>\n          <div class=\"mt-5\">\n            <label>Name:</label>\n            <input\n              v-model=\"session.name\"\n              type=\"text\"\n              class=\"border rounded-sm ml-2 p-1\"\n            />\n          </div>\n\n          <div class=\"mt-5\">\n            <label>Token list:</label>\n            <input\n              v-model=\"session.tokens\"\n              type=\"text\"\n              class=\"border rounded-sm ml-2 p-1\"\n            />\n          </div>\n\n          <div class=\"mt-5\">\n            <input\n              v-model=\"session.blindParticipant\"\n              type=\"checkbox\"\n              class=\"border rounded-sm mr-2\"\n            />\n            <label\n              >One participant should not see avatar during the session</label\n            >\n          </div>\n          <button\n            class=\"mt-3 rounded-full bg-orange-400 p-2 px-5 focus:outline-none focus:shadow-outline\"\n            type=\"button\"\n            @click=\"updateSession()\"\n          >\n            Save\n          </button>\n        </form>\n        <div class=\"mt-10\">\n          <h2 class=\"mb-3 text-md font-light\">Participant list:</h2>\n          <Table\n            :head=\"[\n              'Code',\n              'Name',\n              'Email',\n              'Room',\n              'Status',\n              'Rejoin',\n              'Delete',\n            ]\"\n            :body=\"participants\"\n            :actions=\"[\n              { eventName: 'rejoin', icon: reloadIconUrl, key: 'socketId' },\n              { eventName: 'delete', icon: deleteIconUrl, key: 'mail' },\n            ]\"\n            :invisible=\"['socketId']\"\n            @delete=\"deleteUser($event)\"\n            @rejoin=\"rejoinUser($event)\"\n          />\n          <p class=\"mt-3 font-bold\">\n            Total: {{ this.participants.length }} participants.\n          </p>\n        </div>\n        <div class=\"mt-10\">\n          <h2 class=\"mb-3 text-md font-light\">Tests &amp; exercises:</h2>\n          <Table\n            :head=\"['Test', 'Number of exercises', 'Total time (seconds)']\"\n            :body=\"tests\"\n          />\n          <button\n            class=\"mt-3 rounded-full bg-orange-400 p-2 px-5 focus:outline-none focus:shadow-outline\"\n            @click=\"loadExerciseConfiguration()\"\n          >\n            Exercise configuration\n          </button>\n        </div>\n\n        <div class=\"mt-10 border p-3 rounded-md\">\n          <h2 class=\"mb-3 text-md font-light\">Actions:</h2>\n          <button\n            class=\"mt-3 ml-2 p-3 rounded-md bg-gray-100 border px-5 text-gray-800 w-48\"\n            :class=\"\n              session.running\n                ? 'hover:bg-gray-200 hover:border-gray-300 hover:text-gray-800'\n                : 'hover:bg-green-200 hover:border-green-300 hover:text-green-800'\n            \"\n            @click=\"toggleSessionMethod()\"\n          >\n            <img\n              v-if=\"waitingStartResponse\"\n              src=\"@/assets/icons/loading.gif\"\n              class=\"h-5 inline\"\n            />\n            <span v-if=\"!waitingStartResponse && session.running == false\"\n              >Start session</span\n            >\n            <span v-if=\"!waitingStartResponse && session.running == true\"\n              >Reset session</span\n            >\n          </button>\n          <button\n            class=\"mt-3 ml-2 p-3 rounded-md bg-gray-100 border px-5 text-gray-800 hover:bg-yellow-200 hover:border-yellow-300 hover:text-yellow-800\"\n            @click=\"goToReports()\"\n          >\n            See reports\n          </button>\n          <button\n            class=\"mt-3 ml-2 p-3 rounded-md bg-gray-100 border px-5 text-gray-800 hover:bg-red-200 hover:border-red-300 hover:text-red-800\"\n            @click=\"deleteSession()\"\n          >\n            Delete session\n          </button>\n        </div>\n        \n          <button\n            class=\"mt-3 rounded-full bg-orange-400 p-2 px-5 focus:outline-none focus:shadow-outline\"\n            type=\"button\"\n            @click=\"goBack()\"\n          >\n            Go Back\n          </button>\n      </div>\n    </div>\n    <div style=\"width: 320px; margin-left: auto; margin-right: auto; margin-top: 200px;\" class=\"typewriter\" v-if=\"!loggedIn || !sessionExists\">\n      <h1>Sorry! This page is not available</h1>\n    </div>\n  </div>\n</template>\n<style>\n.typewriter h1 {\n  overflow: hidden; /* Ensures the content is not revealed until the animation */\n  border-right: .15em solid orange; /* The typwriter cursor */\n  white-space: nowrap; /* Keeps the content on a single line */\n  margin: 0 auto; /* Gives that scrolling effect as the typing happens */\n  letter-spacing: .15em; /* Adjust as needed */\n  animation: \n    typing 3s steps(50, end),\n    blink-caret .75s step-end infinite;\n}\n \n/* The typing effect */\n@keyframes typing {\n  from { width: 0 }\n  to { width: 100% }\n}\n \n/* The typewriter cursor effect */\n@keyframes blink-caret {\n  from, to { border-color: transparent }\n  50% { border-color: orange; }\n}\n</style>\n\n<script>\nimport Header from \"../components/Header\";\nimport Table from \"../components/Table\";\nimport ToggleSwitch from \"../components/ToggleSwitch\";\nimport deleteIcon from \"@/assets/icons/delete_bin.png\";\nimport reloadIcon from \"@/assets/icons/reload.png\";\n\nexport default {\n  components: {\n    Header,\n    Table,\n    ToggleSwitch,\n  },\n  data() {\n    return {\n      loggedIn: false,\n      sessionExists: false,\n      session: {\n        name: null,\n        tokens: null,\n        tokenPairing: null,\n        blindParticipant: null,\n        active: null,\n        running: null,\n        pairingMode: null,\n      },\n      participants: [],\n      tests: [],\n      deleteIconUrl: deleteIcon,\n      reloadIconUrl: reloadIcon,\n      waitingStartResponse: false,\n    };\n  },\n  sockets: {\n    clientConnected(code) {\n      console.log(\"Participant \" + code + \" joined\");\n      setTimeout(() => {\n        this.loadParticipants();\n      }, 500);\n    },\n    clientDisconnected(code) {\n      console.log(\"Participant \" + code + \" disconnected\");\n      setTimeout(() => {\n        this.loadParticipants();\n      }, 500);\n    },\n  },\n  methods: {\n    goBack() {\n      this.$router.push({\n        path: `/administration`,\n      });\n    },\n    deleteUser(userEmail) {\n      var r = confirm(\n        \"You are going to remove the participant with email \" +\n          userEmail +\n          \". This action cannot be undone. Are you sure?\"\n      );\n      if (r) {\n        fetch(\n          `${process.env.VUE_APP_TC_API}/participants/${this.$route.params.sessionName}/${userEmail}`,\n          {\n            method: \"DELETE\",\n            headers: {\n              Authorization: localStorage.adminSecret,\n            },\n          }\n        ).then((response) => {\n          if (response.status == 200) {\n            this.loadParticipants();\n          }\n        });\n      }\n    },\n    rejoinUser(socketId) {\n      if (socketId) {\n        console.log(\"Asking \" + socketId + \" to rejoin.\");\n        this.$socket.client.emit(\"requestToJoinAgain\", socketId);\n      }\n    },\n    toggleSessionMethod() {\n      if (!this.waitingStartResponse) {\n        if (this.session.running) {\n          this.resetSession();\n        } else {\n          this.startSession();\n        }\n      }\n    },\n    startSession() {\n      console.log(\"Session starting...\");\n      this.waitingStartResponse = true;\n      fetch(\n        `${process.env.VUE_APP_TC_API}/startSession/${this.$route.params.sessionName}`,\n        {\n          method: \"POST\",\n          headers: {\n            Authorization: localStorage.adminSecret,\n          },\n        }\n      ).then((response) => {\n        if (response.status == 200) {\n          setTimeout(() => {\n            this.loadSession();\n          }, 6000);\n          return response.json();\n        }\n      });\n    },\n    loadSession() {\n      fetch(\n        `${process.env.VUE_APP_TC_API}/sessions/${this.$route.params.sessionName}`,\n        {\n          method: \"GET\",\n          headers: {\n            Authorization: localStorage.adminSecret,\n          },\n        }\n      )\n        .then((response) => {\n          if (response.status == 200) {\n            this.sessionExists = true;\n            return response.json();\n          } \n        })\n        .then((retrievedSession) => {\n          if (retrievedSession) {\n            this.session.name = retrievedSession.name;\n            this.session.tokens = retrievedSession.tokens;\n            this.session.tokenPairing = retrievedSession.tokenPairing;\n            this.session.blindParticipant = retrievedSession.blindParticipant;\n            this.session.active = retrievedSession.active;\n            this.session.running = retrievedSession.running;\n            this.session.pairingMode = retrievedSession.pairingMode;\n          }\n          this.waitingStartResponse = false;\n        });\n    },\n    resetSession() {\n      this.waitingStartResponse = true;\n      fetch(process.env.VUE_APP_TC_API + \"/resetSession\", {\n        method: \"POST\",\n        body: JSON.stringify({ session: this.$route.params.sessionName }), // data can be `string` or {object}!\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: localStorage.adminSecret,\n        },\n      }).then((response) => {\n        if (response.status == 200) {\n          setTimeout(() => {\n            this.loadSession();\n          }, 1000);\n        }\n      });\n    },\n    loadParticipants() {\n      fetch(`${process.env.VUE_APP_TC_API}/sessions`, {\n        method: \"GET\",\n        headers: {\n          Authorization: localStorage.adminSecret,\n        },\n      })\n        .then((response) => {\n          if (response.status == 200) {\n            this.loggedIn = true;\n          }\n          return response.json();\n        });\n      console.log(\"loading participants\");\n      fetch(\n        `${process.env.VUE_APP_TC_API}/participants/${this.$route.params.sessionName}`,\n        {\n          method: \"GET\",\n          headers: {\n            Authorization: localStorage.adminSecret,\n          },\n        }\n      )\n        .then((response) => {\n          if (response.status == 200) {\n            return response.json();\n          }\n        })\n        .then((participants) => {\n          if (participants) {\n            this.participants = participants;\n          }\n        });\n    },\n    loadTests() {\n      fetch(\n        `${process.env.VUE_APP_TC_API}/tests/${this.$route.params.sessionName}`,\n        {\n          method: \"GET\",\n          headers: {\n            Authorization: localStorage.adminSecret,\n          },\n        }\n      )\n        .then((response) => {\n          if (response.status == 200) {\n            return response.json();\n          }\n        })\n        .then((tests) => {\n          if (tests) {\n            let orderedTests = [];\n            tests.forEach((test) => {\n              let orderedTest = {};\n              orderedTest.name = test.name;\n              orderedTest.excercises = test.exercises.length;\n              let totalTime = 0;\n              test.exercises.forEach((exercise) => {\n                totalTime += exercise.time;\n              });\n              orderedTest.totalTime = totalTime;\n              orderedTests.push(orderedTest);\n            });\n            this.tests = orderedTests;\n          }\n        });\n    },\n    loadExerciseConfiguration() {\n      this.$router.push({\n        path: `/administration/exercises/${this.$route.params.sessionName}`,\n      });\n    },\n    deleteSession() {\n      var r = confirm(\n        \"You are going to delete session \" +\n          this.$route.params.sessionName +\n          \". This action cannot be undone. Are you sure?\"\n      );\n      if (r) {\n        fetch(\n          `${process.env.VUE_APP_TC_API}/sessions/${this.$route.params.sessionName}`,\n          {\n            method: \"DELETE\",\n            headers: {\n              Authorization: localStorage.adminSecret,\n            },\n          }\n        ).then((response) => {\n          if (response.status == 200) {\n            this.$router.push({\n              path: `/administration`,\n            });\n          }\n        });\n      }\n    },\n    updateSession() {\n      console.log(\"Updating session... \" + this.$route.params.sessionName);\n      console.log(\"Data: \" + JSON.stringify(this.session, null, 2));\n      fetch(\n        `${process.env.VUE_APP_TC_API}/sessions/${this.$route.params.sessionName}`,\n        {\n          method: \"PUT\",\n          body: JSON.stringify(this.session),\n          headers: {\n            Authorization: localStorage.adminSecret,\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      ).then((response) => {\n        if (response.status == 200) {\n          alert(`Session Updated!`);\n        }\n      });\n    },\n    toggleActivation() {\n      fetch(\n        `${process.env.VUE_APP_TC_API}/sessions/${this.$route.params.sessionName}/toggleActivation`,\n        {\n          method: \"PUT\",\n          headers: {\n            Authorization: localStorage.adminSecret,\n          },\n        }\n      ).then((response) => {\n        if (response.status == 200) {\n          alert(\n            `Session is now ${this.session.active ? \"active!\" : \"inactive!\"}`\n          );\n        }\n      });\n    },\n    goToReports() {\n      this.$router.push({\n        path: `/administration/reports/${this.$route.params.sessionName}`,\n      });\n    },\n  },\n  mounted() {\n    this.loadSession();\n    this.loadParticipants();\n    this.loadTests();\n    this.$socket.client.emit(\"adminConnected\", this.$route.params.sessionName);\n  },\n};\n</script>\n\n<style></style>\n"]}]}