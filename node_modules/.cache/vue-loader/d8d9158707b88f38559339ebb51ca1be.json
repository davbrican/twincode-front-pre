{"remainingRequest":"F:\\TWINCODE\\twincode-front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!F:\\TWINCODE\\twincode-front\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\TWINCODE\\twincode-front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\TWINCODE\\twincode-front\\src\\pages\\ExerciseConfiguration.vue?vue&type=template&id=3b3b64a5&","dependencies":[{"path":"F:\\TWINCODE\\twincode-front\\src\\pages\\ExerciseConfiguration.vue","mtime":1627496094464},{"path":"F:\\TWINCODE\\twincode-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\TWINCODE\\twincode-front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"F:\\TWINCODE\\twincode-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\TWINCODE\\twincode-front\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2RpdicsW19jKCdIZWFkZXInKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6InRleHQtY2VudGVyIGFsaWduLW1pZGRsZSJ9LFtfdm0uX20oMCksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJwLTMgdGV4dC1sZWZ0IG1heC13LTR4bCBteC1hdXRvIG1iLTIwIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczoibXQtNSJ9LFtfYygnaDInLHtzdGF0aWNDbGFzczoiZm9udC1ib2xkIHRleHQteGwifSxbX3ZtLl92KCIgIitfdm0uX3ModGhpcy4kcm91dGUucGFyYW1zLnNlc3Npb25OYW1lKSsiIHNlc3Npb24gIildKV0pLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoibXQtNSJ9LFtfYygnaDInLHtzdGF0aWNDbGFzczoibWItMyB0ZXh0LW1kIGZvbnQtbGlnaHQifSxbX3ZtLl92KCJUZXN0cyBsaXN0OiIpXSksX2MoJ1RhYmxlJyx7YXR0cnM6eyJoZWFkIjpbJ1Rlc3QnLCAnTnVtYmVyIG9mIGV4ZXJjaXNlcycsICdUb3RhbCB0aW1lIChzZWNvbmRzKSddLCJib2R5Ijpfdm0ub3JkZXJlZFRlc3RzfSxtb2RlbDp7dmFsdWU6KF92bS5zZWxlY3RlZFRlc3QpLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0uc2VsZWN0ZWRUZXN0PSQkdn0sZXhwcmVzc2lvbjoic2VsZWN0ZWRUZXN0In19KSxfYygnYnV0dG9uJyx7c3RhdGljQ2xhc3M6Im10LTMgcC0xIHJvdW5kZWQtbWQgYmctZ3JheS0xMDAgYm9yZGVyIHB4LTUgdGV4dC1ncmF5LTgwMCBob3ZlcjpiZy1ncmVlbi0yMDAgaG92ZXI6Ym9yZGVyLWdyZWVuLTMwMCBob3Zlcjp0ZXh0LWdyZWVuLTgwMCIsb246eyJjbGljayI6ZnVuY3Rpb24oJGV2ZW50KXtyZXR1cm4gX3ZtLmNyZWF0ZVRlc3QoKX19fSxbX3ZtLl92KCIgKyBBZGQgdGVzdCAiKV0pLF9jKCdidXR0b24nLHtzdGF0aWNDbGFzczoibXQtMyBtbC0yIHAtMSByb3VuZGVkLW1kIGJnLWdyYXktMTAwIGJvcmRlciBweC01IHRleHQtcmVkLTgwMCBob3ZlcjpiZy1yZWQtMjAwIGhvdmVyOmJvcmRlci1yZWQtMzAwIixvbjp7ImNsaWNrIjpmdW5jdGlvbigkZXZlbnQpe3JldHVybiBfdm0ucmVtb3ZlVGVzdCgpfX19LFtfdm0uX3YoIiAtIFJlbW92ZSB0ZXN0ICIpXSldLDEpLChfdm0udGVzdHMgIT0gdW5kZWZpbmVkICYmIF92bS50ZXN0cy5sZW5ndGggPiAwKT9fYygnZGl2Jyx7c3RhdGljQ2xhc3M6Im10LTEwIn0sW19jKCdoMicse3N0YXRpY0NsYXNzOiJtYi0zIHRleHQtbWQgZm9udC1saWdodCJ9LFtfdm0uX3YoIlRlc3Q6IildKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6ImJvcmRlciBpdGVtcy1jZW50ZXIgcHktNiBtdC02In0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczoibXQtNCBtYXgtdy14bCBteC1hdXRvIn0sW19jKCdsYWJlbCcse3N0YXRpY0NsYXNzOiJhbGlnbi1taWRkbGUgdGV4dC1ncmF5LTcwMCB0ZXh0LXNtIGZvbnQtYm9sZCBtYi0yIixhdHRyczp7ImZvciI6Im5hbWUifX0sW192bS5fdigiIE5hbWU6ICIpXSksX2MoJ2lucHV0Jyx7ZGlyZWN0aXZlczpbe25hbWU6Im1vZGVsIixyYXdOYW1lOiJ2LW1vZGVsIix2YWx1ZTooX3ZtLnRlc3RzW192bS5zZWxlY3RlZFRlc3RdLm5hbWUpLGV4cHJlc3Npb246InRlc3RzW3NlbGVjdGVkVGVzdF0ubmFtZSJ9XSxzdGF0aWNDbGFzczoibWwtMiBhcHBlYXJhbmNlLW5vbmUgYm9yZGVyIHJvdW5kZWQgcHktMiBweC0zIHctNDAgdGV4dC1ncmF5LTcwMCBsZWFkaW5nLXRpZ2h0IGZvY3VzOm91dGxpbmUtbm9uZSBmb2N1czpzaGFkb3ctb3V0bGluZSIsYXR0cnM6eyJpZCI6Im5hbWUiLCJ0eXBlIjoidGV4dCJ9LGRvbVByb3BzOnsidmFsdWUiOihfdm0udGVzdHNbX3ZtLnNlbGVjdGVkVGVzdF0ubmFtZSl9LG9uOnsiaW5wdXQiOmZ1bmN0aW9uKCRldmVudCl7aWYoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpeyByZXR1cm47IH1fdm0uJHNldChfdm0udGVzdHNbX3ZtLnNlbGVjdGVkVGVzdF0sICJuYW1lIiwgJGV2ZW50LnRhcmdldC52YWx1ZSl9fX0pXSksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJtdC00IG1heC13LXhsIG14LWF1dG8ifSxbX2MoJ2xhYmVsJyx7c3RhdGljQ2xhc3M6ImFsaWduLXRvcCB0ZXh0LWdyYXktNzAwIHRleHQtc20gZm9udC1ib2xkIG1iLTIiLGF0dHJzOnsiZm9yIjoiZGVzY3JpcHRpb24ifX0sW192bS5fdigiIERlc2NyaXB0aW9uOiAiKV0pLF9jKCd0ZXh0YXJlYScse2RpcmVjdGl2ZXM6W3tuYW1lOiJtb2RlbCIscmF3TmFtZToidi1tb2RlbCIsdmFsdWU6KF92bS50ZXN0c1tfdm0uc2VsZWN0ZWRUZXN0XS5kZXNjcmlwdGlvbiksZXhwcmVzc2lvbjoidGVzdHNbc2VsZWN0ZWRUZXN0XS5kZXNjcmlwdGlvbiJ9XSxzdGF0aWNDbGFzczoibWwtMiBhcHBlYXJhbmNlLW5vbmUgYm9yZGVyIHJvdW5kZWQgcHktMiBweC0zIHctMTAvMTIgdGV4dC1ncmF5LTcwMCBsZWFkaW5nLXRpZ2h0IGZvY3VzOm91dGxpbmUtbm9uZSBmb2N1czpzaGFkb3ctb3V0bGluZSIsYXR0cnM6eyJpZCI6ImRlc2NyaXB0aW9uIiwidHlwZSI6InRleHQifSxkb21Qcm9wczp7InZhbHVlIjooX3ZtLnRlc3RzW192bS5zZWxlY3RlZFRlc3RdLmRlc2NyaXB0aW9uKX0sb246eyJpbnB1dCI6ZnVuY3Rpb24oJGV2ZW50KXtpZigkZXZlbnQudGFyZ2V0LmNvbXBvc2luZyl7IHJldHVybjsgfV92bS4kc2V0KF92bS50ZXN0c1tfdm0uc2VsZWN0ZWRUZXN0XSwgImRlc2NyaXB0aW9uIiwgJGV2ZW50LnRhcmdldC52YWx1ZSl9fX0pXSksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJtdC00IG1heC13LXhsIG14LWF1dG8ifSxbX2MoJ2xhYmVsJyx7c3RhdGljQ2xhc3M6ImFsaWduLW1pZGRsZSB0ZXh0LWdyYXktNzAwIHRleHQtc20gZm9udC1ib2xkIG1iLTIiLGF0dHJzOnsiZm9yIjoidGltZSJ9fSxbX3ZtLl92KCIgUHJlcGFyYXRpb24gdGltZTogIildKSxfYygnaW5wdXQnLHtkaXJlY3RpdmVzOlt7bmFtZToibW9kZWwiLHJhd05hbWU6InYtbW9kZWwiLHZhbHVlOihfdm0udGVzdHNbX3ZtLnNlbGVjdGVkVGVzdF0udGltZSksZXhwcmVzc2lvbjoidGVzdHNbc2VsZWN0ZWRUZXN0XS50aW1lIn1dLHN0YXRpY0NsYXNzOiJtbC0yIGFwcGVhcmFuY2Utbm9uZSBib3JkZXIgcm91bmRlZCBweS0yIHB4LTMgdy0yMCB0ZXh0LWdyYXktNzAwIGxlYWRpbmctdGlnaHQgZm9jdXM6b3V0bGluZS1ub25lIGZvY3VzOnNoYWRvdy1vdXRsaW5lIixhdHRyczp7ImlkIjoidGltZSIsInR5cGUiOiJudW1iZXIifSxkb21Qcm9wczp7InZhbHVlIjooX3ZtLnRlc3RzW192bS5zZWxlY3RlZFRlc3RdLnRpbWUpfSxvbjp7ImlucHV0IjpmdW5jdGlvbigkZXZlbnQpe2lmKCRldmVudC50YXJnZXQuY29tcG9zaW5nKXsgcmV0dXJuOyB9X3ZtLiRzZXQoX3ZtLnRlc3RzW192bS5zZWxlY3RlZFRlc3RdLCAidGltZSIsICRldmVudC50YXJnZXQudmFsdWUpfX19KSxfYygncCcse3N0YXRpY0NsYXNzOiJpbmxpbmUgdGV4dC1ncmF5LTcwMCBmb250LWxpZ2h0IG14LTMifSxbX3ZtLl92KCJzZWNvbmRzIildKV0pLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoibXQtNCBtYXgtdy14bCBteC1hdXRvIn0sW19jKCdsYWJlbCcse3N0YXRpY0NsYXNzOiJhbGlnbi1taWRkbGUgdGV4dC1ncmF5LTcwMCB0ZXh0LXNtIGZvbnQtYm9sZCBtYi0yIixhdHRyczp7ImZvciI6InBlZXJDaGFuZ2UifX0sW192bS5fdigiIENoYW5nZSBnZW5kZXI6ICIpXSksX2MoJ2lucHV0Jyx7ZGlyZWN0aXZlczpbe25hbWU6Im1vZGVsIixyYXdOYW1lOiJ2LW1vZGVsIix2YWx1ZTooX3ZtLnRlc3RzW192bS5zZWxlY3RlZFRlc3RdLnBlZXJDaGFuZ2UpLGV4cHJlc3Npb246InRlc3RzW3NlbGVjdGVkVGVzdF0ucGVlckNoYW5nZSJ9XSxzdGF0aWNDbGFzczoibWwtMiIsYXR0cnM6eyJpZCI6InBlZXJDaGFuZ2UiLCJ0eXBlIjoiY2hlY2tib3gifSxkb21Qcm9wczp7ImNoZWNrZWQiOkFycmF5LmlzQXJyYXkoX3ZtLnRlc3RzW192bS5zZWxlY3RlZFRlc3RdLnBlZXJDaGFuZ2UpP192bS5faShfdm0udGVzdHNbX3ZtLnNlbGVjdGVkVGVzdF0ucGVlckNoYW5nZSxudWxsKT4tMTooX3ZtLnRlc3RzW192bS5zZWxlY3RlZFRlc3RdLnBlZXJDaGFuZ2UpfSxvbjp7ImNoYW5nZSI6ZnVuY3Rpb24oJGV2ZW50KXt2YXIgJCRhPV92bS50ZXN0c1tfdm0uc2VsZWN0ZWRUZXN0XS5wZWVyQ2hhbmdlLCQkZWw9JGV2ZW50LnRhcmdldCwkJGM9JCRlbC5jaGVja2VkPyh0cnVlKTooZmFsc2UpO2lmKEFycmF5LmlzQXJyYXkoJCRhKSl7dmFyICQkdj1udWxsLCQkaT1fdm0uX2koJCRhLCQkdik7aWYoJCRlbC5jaGVja2VkKXskJGk8MCYmKF92bS4kc2V0KF92bS50ZXN0c1tfdm0uc2VsZWN0ZWRUZXN0XSwgInBlZXJDaGFuZ2UiLCAkJGEuY29uY2F0KFskJHZdKSkpfWVsc2V7JCRpPi0xJiYoX3ZtLiRzZXQoX3ZtLnRlc3RzW192bS5zZWxlY3RlZFRlc3RdLCAicGVlckNoYW5nZSIsICQkYS5zbGljZSgwLCQkaSkuY29uY2F0KCQkYS5zbGljZSgkJGkrMSkpKSl9fWVsc2V7X3ZtLiRzZXQoX3ZtLnRlc3RzW192bS5zZWxlY3RlZFRlc3RdLCAicGVlckNoYW5nZSIsICQkYyl9fX19KV0pXSldKTpfdm0uX2UoKSwoX3ZtLnRlc3RzICE9IHVuZGVmaW5lZCAmJiBfdm0udGVzdHMubGVuZ3RoID4gMCk/X2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJtdC0xMCByZWxhdGl2ZSJ9LFtfYygnaDInLHtzdGF0aWNDbGFzczoibWItMyB0ZXh0LW1kIGZvbnQtbGlnaHQifSxbX3ZtLl92KCJFeGVyY2lzZXM6IildKSxfYygnQnV0dG9uU2VsZWN0b3InLHtzdGF0aWNDbGFzczoiaW5saW5lIixhdHRyczp7Imxpc3RPZlZhbHVlcyI6X3ZtLnRlc3RzW192bS5zZWxlY3RlZFRlc3RdLmV4ZXJjaXNlcywicHJvcGVydHlOYW1lIjoibmFtZSJ9LG1vZGVsOnt2YWx1ZTooX3ZtLnNlbGVjdGVkRXhlcmNpc2VJbmRleCksY2FsbGJhY2s6ZnVuY3Rpb24gKCQkdikge192bS5zZWxlY3RlZEV4ZXJjaXNlSW5kZXg9JCR2fSxleHByZXNzaW9uOiJzZWxlY3RlZEV4ZXJjaXNlSW5kZXgifX0pLF9jKCdidXR0b24nLHtzdGF0aWNDbGFzczoiaW5saW5lIGFic29sdXRlIHJpZ2h0LTAgcC0yIHJvdW5kZWQtbWQgYmctZ3JheS0xMDAgYm9yZGVyIHB4LTUgdGV4dC1ncmF5LTgwMCIsb246eyJjbGljayI6ZnVuY3Rpb24oJGV2ZW50KXtyZXR1cm4gX3ZtLmNyZWF0ZUV4ZXJjaXNlKCl9fX0sW192bS5fdigiIEFkZCBleGNlcmNpc2UgIildKSwoX3ZtLnRlc3RzW192bS5zZWxlY3RlZFRlc3RdLmV4ZXJjaXNlcy5sZW5ndGggPiAwKT9fYygnZGl2Jyx7c3RhdGljQ2xhc3M6ImJvcmRlciBpdGVtcy1jZW50ZXIgcHktNiJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6Im10LTQgbWF4LXcteGwgbXgtYXV0byJ9LFtfYygnbGFiZWwnLHtzdGF0aWNDbGFzczoiYWxpZ24tbWlkZGxlIHRleHQtZ3JheS03MDAgdGV4dC1zbSBmb250LWJvbGQgbWItMiIsYXR0cnM6eyJmb3IiOiJkZXNjcmlwdGlvbiJ9fSxbX3ZtLl92KCIgTmFtZTogIildKSxfYygnaW5wdXQnLHtkaXJlY3RpdmVzOlt7bmFtZToibW9kZWwiLHJhd05hbWU6InYtbW9kZWwiLHZhbHVlOigKICAgICAgICAgICAgICAgIF92bS50ZXN0c1tfdm0uc2VsZWN0ZWRUZXN0XS5leGVyY2lzZXNbX3ZtLnNlbGVjdGVkRXhlcmNpc2VJbmRleF0ubmFtZQogICAgICAgICAgICAgICksZXhwcmVzc2lvbjoiXG4gICAgICAgICAgICAgICAgdGVzdHNbc2VsZWN0ZWRUZXN0XS5leGVyY2lzZXNbc2VsZWN0ZWRFeGVyY2lzZUluZGV4XS5uYW1lXG4gICAgICAgICAgICAgICJ9XSxzdGF0aWNDbGFzczoibWwtMiBhcHBlYXJhbmNlLW5vbmUgYm9yZGVyIHJvdW5kZWQgcHktMiBweC0zIHctNDAgdGV4dC1ncmF5LTcwMCBsZWFkaW5nLXRpZ2h0IGZvY3VzOm91dGxpbmUtbm9uZSBmb2N1czpzaGFkb3ctb3V0bGluZSIsYXR0cnM6eyJpZCI6ImRlc2NyaXB0aW9uIiwidHlwZSI6InRleHQifSxkb21Qcm9wczp7InZhbHVlIjooCiAgICAgICAgICAgICAgICBfdm0udGVzdHNbX3ZtLnNlbGVjdGVkVGVzdF0uZXhlcmNpc2VzW192bS5zZWxlY3RlZEV4ZXJjaXNlSW5kZXhdLm5hbWUKICAgICAgICAgICAgICApfSxvbjp7ImlucHV0IjpmdW5jdGlvbigkZXZlbnQpe2lmKCRldmVudC50YXJnZXQuY29tcG9zaW5nKXsgcmV0dXJuOyB9X3ZtLiRzZXQoX3ZtLnRlc3RzW192bS5zZWxlY3RlZFRlc3RdLmV4ZXJjaXNlc1tfdm0uc2VsZWN0ZWRFeGVyY2lzZUluZGV4XSwgIm5hbWUiLCAkZXZlbnQudGFyZ2V0LnZhbHVlKX19fSldKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6Im10LTQgbWF4LXcteGwgbXgtYXV0byJ9LFtfYygnbGFiZWwnLHtzdGF0aWNDbGFzczoiYWxpZ24tdG9wIHRleHQtZ3JheS03MDAgdGV4dC1zbSBmb250LWJvbGQgbWItMiIsYXR0cnM6eyJmb3IiOiJkZXNjcmlwdGlvbiJ9fSxbX3ZtLl92KCIgRGVzY3JpcHRpb246ICIpXSksX2MoJ3RleHRhcmVhJyx7ZGlyZWN0aXZlczpbe25hbWU6Im1vZGVsIixyYXdOYW1lOiJ2LW1vZGVsIix2YWx1ZTooCiAgICAgICAgICAgICAgICBfdm0udGVzdHNbX3ZtLnNlbGVjdGVkVGVzdF0uZXhlcmNpc2VzW192bS5zZWxlY3RlZEV4ZXJjaXNlSW5kZXhdCiAgICAgICAgICAgICAgICAgIC5kZXNjcmlwdGlvbgogICAgICAgICAgICAgICksZXhwcmVzc2lvbjoiXG4gICAgICAgICAgICAgICAgdGVzdHNbc2VsZWN0ZWRUZXN0XS5leGVyY2lzZXNbc2VsZWN0ZWRFeGVyY2lzZUluZGV4XVxuICAgICAgICAgICAgICAgICAgLmRlc2NyaXB0aW9uXG4gICAgICAgICAgICAgICJ9XSxzdGF0aWNDbGFzczoibWwtMiBhcHBlYXJhbmNlLW5vbmUgYm9yZGVyIHJvdW5kZWQgcHktMiBweC0zIHctMTAvMTIgdGV4dC1ncmF5LTcwMCBsZWFkaW5nLXRpZ2h0IGZvY3VzOm91dGxpbmUtbm9uZSBmb2N1czpzaGFkb3ctb3V0bGluZSIsYXR0cnM6eyJpZCI6ImRlc2NyaXB0aW9uIiwidHlwZSI6InRleHQifSxkb21Qcm9wczp7InZhbHVlIjooCiAgICAgICAgICAgICAgICBfdm0udGVzdHNbX3ZtLnNlbGVjdGVkVGVzdF0uZXhlcmNpc2VzW192bS5zZWxlY3RlZEV4ZXJjaXNlSW5kZXhdCiAgICAgICAgICAgICAgICAgIC5kZXNjcmlwdGlvbgogICAgICAgICAgICAgICl9LG9uOnsiaW5wdXQiOmZ1bmN0aW9uKCRldmVudCl7aWYoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpeyByZXR1cm47IH1fdm0uJHNldChfdm0udGVzdHNbX3ZtLnNlbGVjdGVkVGVzdF0uZXhlcmNpc2VzW192bS5zZWxlY3RlZEV4ZXJjaXNlSW5kZXhdCiAgICAgICAgICAgICAgICAgICwgImRlc2NyaXB0aW9uIiwgJGV2ZW50LnRhcmdldC52YWx1ZSl9fX0pXSksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJtdC00IG1heC13LXhsIG14LWF1dG8ifSxbX2MoJ2xhYmVsJyx7c3RhdGljQ2xhc3M6ImFsaWduLW1pZGRsZSB0ZXh0LWdyYXktNzAwIHRleHQtc20gZm9udC1ib2xkIG1iLTIifSxbX3ZtLl92KCIgSW5wdXRzIHR5cGU6IildKSxfYygnc2VsZWN0Jyx7ZGlyZWN0aXZlczpbe25hbWU6Im1vZGVsIixyYXdOYW1lOiJ2LW1vZGVsIix2YWx1ZTooCiAgICAgICAgICAgICAgICBfdm0uaW5wdXRzVHlwZQogICAgICAgICAgICAgICksZXhwcmVzc2lvbjoiXG4gICAgICAgICAgICAgICAgaW5wdXRzVHlwZVxuICAgICAgICAgICAgICAifV0sc3RhdGljQ2xhc3M6ImJvcmRlciByb3VuZGVkLXNtIG1sLTIgcC0xIixvbjp7ImNoYW5nZSI6ZnVuY3Rpb24oJGV2ZW50KXt2YXIgJCRzZWxlY3RlZFZhbCA9IEFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbCgkZXZlbnQudGFyZ2V0Lm9wdGlvbnMsZnVuY3Rpb24obyl7cmV0dXJuIG8uc2VsZWN0ZWR9KS5tYXAoZnVuY3Rpb24obyl7dmFyIHZhbCA9ICJfdmFsdWUiIGluIG8gPyBvLl92YWx1ZSA6IG8udmFsdWU7cmV0dXJuIHZhbH0pOyAKICAgICAgICAgICAgICAgIF92bS5pbnB1dHNUeXBlCiAgICAgICAgICAgICAgPSRldmVudC50YXJnZXQubXVsdGlwbGUgPyAkJHNlbGVjdGVkVmFsIDogJCRzZWxlY3RlZFZhbFswXX19fSxbX2MoJ29wdGlvbicse2F0dHJzOnsidmFsdWUiOiJudW1iZXIifX0sW192bS5fdigibnVtYmVyIildKSxfYygnb3B0aW9uJyx7YXR0cnM6eyJ2YWx1ZSI6IlN0cmluZyJ9fSxbX3ZtLl92KCJTdHJpbmciKV0pLF9jKCdvcHRpb24nLHthdHRyczp7InZhbHVlIjoiQm9vbGVhbiJ9fSxbX3ZtLl92KCJCb29sZWFuIildKV0pLF9jKCdicicpLF9jKCdsYWJlbCcse3N0YXRpY0NsYXNzOiJhbGlnbi1taWRkbGUgdGV4dC1ncmF5LTcwMCB0ZXh0LXNtIGZvbnQtYm9sZCBtYi0yIn0sW192bS5fdigiIFNvbHV0aW9ucyB0eXBlOiIpXSksX2MoJ3NlbGVjdCcse2RpcmVjdGl2ZXM6W3tuYW1lOiJtb2RlbCIscmF3TmFtZToidi1tb2RlbCIsdmFsdWU6KAogICAgICAgICAgICAgICAgX3ZtLnNvbHV0aW9uc1R5cGUKICAgICAgICAgICAgICApLGV4cHJlc3Npb246IlxuICAgICAgICAgICAgICAgIHNvbHV0aW9uc1R5cGVcbiAgICAgICAgICAgICAgIn1dLHN0YXRpY0NsYXNzOiJib3JkZXIgcm91bmRlZC1zbSBtbC0yIHAtMSIsb246eyJjaGFuZ2UiOmZ1bmN0aW9uKCRldmVudCl7dmFyICQkc2VsZWN0ZWRWYWwgPSBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoJGV2ZW50LnRhcmdldC5vcHRpb25zLGZ1bmN0aW9uKG8pe3JldHVybiBvLnNlbGVjdGVkfSkubWFwKGZ1bmN0aW9uKG8pe3ZhciB2YWwgPSAiX3ZhbHVlIiBpbiBvID8gby5fdmFsdWUgOiBvLnZhbHVlO3JldHVybiB2YWx9KTsgCiAgICAgICAgICAgICAgICBfdm0uc29sdXRpb25zVHlwZQogICAgICAgICAgICAgID0kZXZlbnQudGFyZ2V0Lm11bHRpcGxlID8gJCRzZWxlY3RlZFZhbCA6ICQkc2VsZWN0ZWRWYWxbMF19fX0sW19jKCdvcHRpb24nLHthdHRyczp7InZhbHVlIjoibnVtYmVyIn19LFtfdm0uX3YoIm51bWJlciIpXSksX2MoJ29wdGlvbicse2F0dHJzOnsidmFsdWUiOiJTdHJpbmcifX0sW192bS5fdigiU3RyaW5nIildKSxfYygnb3B0aW9uJyx7YXR0cnM6eyJ2YWx1ZSI6IkJvb2xlYW4ifX0sW192bS5fdigiQm9vbGVhbiIpXSldKSxfYygnYnInKSxfYygnbGFiZWwnLHtzdGF0aWNDbGFzczoiYWxpZ24tbWlkZGxlIHRleHQtZ3JheS03MDAgdGV4dC1zbSBmb250LWJvbGQgbWItMiIsYXR0cnM6eyJmb3IiOiJzb2x1dGlvbiJ9fSxbX3ZtLl92KCIgSW5wdXRzIC8gU29sdXRpb25zOiAiKV0pLF92bS5fbCgoX3ZtLmlucHV0c1NvbHV0aW9uc1t0aGlzLnNlbGVjdGVkRXhlcmNpc2VJbmRleF0pLGZ1bmN0aW9uKGl0ZW0saW5kZXgpe3JldHVybiBfYygnZGl2Jyx7a2V5Oml0ZW19LFtfYygnZGl2JyxbX2MoJ2xhYmVsJyx7c3RhdGljU3R5bGU6eyJmb250LXdlaWdodCI6ImJvbGQifSxhdHRyczp7ImZvciI6Iml0ZW0ifX0sW192bS5fdigiSW5wdXQgIitfdm0uX3MoaW5kZXggKzEpKyI6ICIpXSksX2MoJ2lucHV0Jyx7ZGlyZWN0aXZlczpbe25hbWU6Im1vZGVsIixyYXdOYW1lOiJ2LW1vZGVsIix2YWx1ZTooCiAgICAgICAgICAgICAgICAgICAgX3ZtLnRlc3RzW192bS5zZWxlY3RlZFRlc3RdLmV4ZXJjaXNlc1tfdm0uc2VsZWN0ZWRFeGVyY2lzZUluZGV4XS5pbnB1dHNbaW5kZXhdCiAgICAgICAgICAgICAgICAgICksZXhwcmVzc2lvbjoiXG4gICAgICAgICAgICAgICAgICAgIHRlc3RzW3NlbGVjdGVkVGVzdF0uZXhlcmNpc2VzW3NlbGVjdGVkRXhlcmNpc2VJbmRleF0uaW5wdXRzW2luZGV4XVxuICAgICAgICAgICAgICAgICAgIn1dLHN0YXRpY0NsYXNzOiJtbC0yIGFwcGVhcmFuY2Utbm9uZSBib3JkZXIgcm91bmRlZCBweS0yIHB4LTMgdy00MCB0ZXh0LWdyYXktNzAwIGxlYWRpbmctdGlnaHQgZm9jdXM6b3V0bGluZS1ub25lIGZvY3VzOnNoYWRvdy1vdXRsaW5lIixhdHRyczp7ImlkIjoiaW5wdXQifSxkb21Qcm9wczp7InZhbHVlIjooCiAgICAgICAgICAgICAgICAgICAgX3ZtLnRlc3RzW192bS5zZWxlY3RlZFRlc3RdLmV4ZXJjaXNlc1tfdm0uc2VsZWN0ZWRFeGVyY2lzZUluZGV4XS5pbnB1dHNbaW5kZXhdCiAgICAgICAgICAgICAgICAgICl9LG9uOnsiaW5wdXQiOmZ1bmN0aW9uKCRldmVudCl7aWYoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpeyByZXR1cm47IH1fdm0uJHNldChfdm0udGVzdHNbX3ZtLnNlbGVjdGVkVGVzdF0uZXhlcmNpc2VzW192bS5zZWxlY3RlZEV4ZXJjaXNlSW5kZXhdLmlucHV0cywgaW5kZXgsICRldmVudC50YXJnZXQudmFsdWUpfX19KSxfYygnbGFiZWwnLHtzdGF0aWNTdHlsZTp7ImZvbnQtd2VpZ2h0IjoiYm9sZCJ9LGF0dHJzOnsiZm9yIjoiaXRlbSJ9fSxbX3ZtLl92KCJTb2x1dGlvbiAiK192bS5fcyhpbmRleCArMSkrIjogIildKSxfYygnaW5wdXQnLHtkaXJlY3RpdmVzOlt7bmFtZToibW9kZWwiLHJhd05hbWU6InYtbW9kZWwiLHZhbHVlOigKICAgICAgICAgICAgICAgICAgICBfdm0udGVzdHNbX3ZtLnNlbGVjdGVkVGVzdF0uZXhlcmNpc2VzW192bS5zZWxlY3RlZEV4ZXJjaXNlSW5kZXhdLnNvbHV0aW9uc1tpbmRleF0KICAgICAgICAgICAgICAgICAgKSxleHByZXNzaW9uOiJcbiAgICAgICAgICAgICAgICAgICAgdGVzdHNbc2VsZWN0ZWRUZXN0XS5leGVyY2lzZXNbc2VsZWN0ZWRFeGVyY2lzZUluZGV4XS5zb2x1dGlvbnNbaW5kZXhdXG4gICAgICAgICAgICAgICAgICAifV0sc3RhdGljQ2xhc3M6Im1sLTIgYXBwZWFyYW5jZS1ub25lIGJvcmRlciByb3VuZGVkIHB5LTIgcHgtMyB3LTQwIHRleHQtZ3JheS03MDAgbGVhZGluZy10aWdodCBmb2N1czpvdXRsaW5lLW5vbmUgZm9jdXM6c2hhZG93LW91dGxpbmUiLGF0dHJzOnsiaWQiOiJzb2x1dGlvbiJ9LGRvbVByb3BzOnsidmFsdWUiOigKICAgICAgICAgICAgICAgICAgICBfdm0udGVzdHNbX3ZtLnNlbGVjdGVkVGVzdF0uZXhlcmNpc2VzW192bS5zZWxlY3RlZEV4ZXJjaXNlSW5kZXhdLnNvbHV0aW9uc1tpbmRleF0KICAgICAgICAgICAgICAgICAgKX0sb246eyJpbnB1dCI6ZnVuY3Rpb24oJGV2ZW50KXtpZigkZXZlbnQudGFyZ2V0LmNvbXBvc2luZyl7IHJldHVybjsgfV92bS4kc2V0KF92bS50ZXN0c1tfdm0uc2VsZWN0ZWRUZXN0XS5leGVyY2lzZXNbX3ZtLnNlbGVjdGVkRXhlcmNpc2VJbmRleF0uc29sdXRpb25zLCBpbmRleCwgJGV2ZW50LnRhcmdldC52YWx1ZSl9fX0pXSldKX0pXSwyKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6Im10LTQgbWF4LXcteGwgbXgtYXV0byJ9LFtfYygnbGFiZWwnLHtzdGF0aWNDbGFzczoiYWxpZ24tbWlkZGxlIHRleHQtZ3JheS03MDAgdGV4dC1zbSBmb250LWJvbGQgbWItMiIsYXR0cnM6eyJmb3IiOiJ0aW1lIn19LFtfdm0uX3YoIiBBdmFpbGFibGUgdGltZSB0byBjb21wbGV0ZSB0aGUgZXhlcmNpc2U6ICIpXSksX2MoJ2lucHV0Jyx7ZGlyZWN0aXZlczpbe25hbWU6Im1vZGVsIixyYXdOYW1lOiJ2LW1vZGVsLm51bWJlciIsdmFsdWU6KAogICAgICAgICAgICAgICAgX3ZtLnRlc3RzW192bS5zZWxlY3RlZFRlc3RdLmV4ZXJjaXNlc1tfdm0uc2VsZWN0ZWRFeGVyY2lzZUluZGV4XS50aW1lCiAgICAgICAgICAgICAgKSxleHByZXNzaW9uOiJcbiAgICAgICAgICAgICAgICB0ZXN0c1tzZWxlY3RlZFRlc3RdLmV4ZXJjaXNlc1tzZWxlY3RlZEV4ZXJjaXNlSW5kZXhdLnRpbWVcbiAgICAgICAgICAgICAgIixtb2RpZmllcnM6eyJudW1iZXIiOnRydWV9fV0sc3RhdGljQ2xhc3M6Im1sLTIgYXBwZWFyYW5jZS1ub25lIGJvcmRlciByb3VuZGVkIHB5LTIgcHgtMyB3LTIwIHRleHQtZ3JheS03MDAgbGVhZGluZy10aWdodCBmb2N1czpvdXRsaW5lLW5vbmUgZm9jdXM6c2hhZG93LW91dGxpbmUiLGF0dHJzOnsiaWQiOiJ0aW1lIiwidHlwZSI6Im51bWJlciJ9LGRvbVByb3BzOnsidmFsdWUiOigKICAgICAgICAgICAgICAgIF92bS50ZXN0c1tfdm0uc2VsZWN0ZWRUZXN0XS5leGVyY2lzZXNbX3ZtLnNlbGVjdGVkRXhlcmNpc2VJbmRleF0udGltZQogICAgICAgICAgICAgICl9LG9uOnsiaW5wdXQiOmZ1bmN0aW9uKCRldmVudCl7aWYoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpeyByZXR1cm47IH1fdm0uJHNldChfdm0udGVzdHNbX3ZtLnNlbGVjdGVkVGVzdF0uZXhlcmNpc2VzW192bS5zZWxlY3RlZEV4ZXJjaXNlSW5kZXhdLCAidGltZSIsIF92bS5fbigkZXZlbnQudGFyZ2V0LnZhbHVlKSl9LCJibHVyIjpmdW5jdGlvbigkZXZlbnQpe3JldHVybiBfdm0uJGZvcmNlVXBkYXRlKCl9fX0pLF9jKCdwJyx7c3RhdGljQ2xhc3M6ImlubGluZSB0ZXh0LWdyYXktNzAwIGZvbnQtbGlnaHQgbXgtMyJ9LFtfdm0uX3YoInNlY29uZHMiKV0pXSksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJtdC00IG1heC13LXhsIG14LWF1dG8ifSxbX2MoJ2xhYmVsJyx7c3RhdGljQ2xhc3M6ImFsaWduLW1pZGRsZSB0ZXh0LWdyYXktNzAwIHRleHQtc20gZm9udC1ib2xkIG1iLTIiLGF0dHJzOnsiZm9yIjoidHlwZSJ9fSxbX3ZtLl92KCIgVHlwZSBvZiBleGVyY2lzZTogIildKSxfYygnc2VsZWN0Jyx7ZGlyZWN0aXZlczpbe25hbWU6Im1vZGVsIixyYXdOYW1lOiJ2LW1vZGVsIix2YWx1ZTooCiAgICAgICAgICAgICAgICBfdm0udGVzdHNbX3ZtLnNlbGVjdGVkVGVzdF0uZXhlcmNpc2VzW192bS5zZWxlY3RlZEV4ZXJjaXNlSW5kZXhdLnR5cGUKICAgICAgICAgICAgICApLGV4cHJlc3Npb246IlxuICAgICAgICAgICAgICAgIHRlc3RzW3NlbGVjdGVkVGVzdF0uZXhlcmNpc2VzW3NlbGVjdGVkRXhlcmNpc2VJbmRleF0udHlwZVxuICAgICAgICAgICAgICAifV0sc3RhdGljQ2xhc3M6ImJvcmRlciByb3VuZGVkLXNtIG1sLTIgcC0xIixvbjp7ImNoYW5nZSI6ZnVuY3Rpb24oJGV2ZW50KXt2YXIgJCRzZWxlY3RlZFZhbCA9IEFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbCgkZXZlbnQudGFyZ2V0Lm9wdGlvbnMsZnVuY3Rpb24obyl7cmV0dXJuIG8uc2VsZWN0ZWR9KS5tYXAoZnVuY3Rpb24obyl7dmFyIHZhbCA9ICJfdmFsdWUiIGluIG8gPyBvLl92YWx1ZSA6IG8udmFsdWU7cmV0dXJuIHZhbH0pOyBfdm0uJHNldChfdm0udGVzdHNbX3ZtLnNlbGVjdGVkVGVzdF0uZXhlcmNpc2VzW192bS5zZWxlY3RlZEV4ZXJjaXNlSW5kZXhdLCAidHlwZSIsICRldmVudC50YXJnZXQubXVsdGlwbGUgPyAkJHNlbGVjdGVkVmFsIDogJCRzZWxlY3RlZFZhbFswXSl9fX0sW19jKCdvcHRpb24nLHthdHRyczp7InZhbHVlIjoiSU5ESVZJRFVBTCJ9fSxbX3ZtLl92KCJJTkRJVklEVUFMIildKSxfYygnb3B0aW9uJyx7YXR0cnM6eyJ2YWx1ZSI6IlBBSVIifX0sW192bS5fdigiUEFJUiIpXSldKV0pLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoibXQtNCBtYXgtdy14bCBteC1hdXRvIHJlbGF0aXZlIn0sW19jKCdidXR0b24nLHtzdGF0aWNDbGFzczoibXQtMyBtci0zIHJvdW5kZWQtZnVsbCBiZy1ncmF5LTIwMCBwLTIgcHgtNSBob3ZlcjpiZy1ncmF5LTMwMCBmb2N1czpvdXRsaW5lLW5vbmUgZm9jdXM6c2hhZG93LW91dGxpbmUiLG9uOnsiY2xpY2siOmZ1bmN0aW9uKCRldmVudCl7cmV0dXJuIF92bS5wbGF5RGVtb0V4ZXJjaXNlKCl9fX0sW19jKCdpbWcnLHtzdGF0aWNDbGFzczoidy01IGlubGluZS1ibG9jayBtci0xIixhdHRyczp7InNyYyI6cmVxdWlyZSgiQC9hc3NldHMvaWNvbnMvcGxheV9pY29uLnBuZyIpfX0pLF9jKCdwJyx7c3RhdGljQ2xhc3M6ImlubGluZS1ibG9jayB0ZXh0LWdyZWVuLTkwMCBhbGlnbi1taWRkbGUgZm9udC1tZWRpdW0ifSxbX3ZtLl92KCIgUGxheSBkZW1vIGV4ZXJjaXNlICIpXSldKSxfYygnYnV0dG9uJyx7c3RhdGljQ2xhc3M6Im10LTMgcm91bmRlZC1mdWxsIGJnLW9yYW5nZS00MDAgcC0yIHB4LTUgZm9jdXM6b3V0bGluZS1ub25lIGZvY3VzOnNoYWRvdy1vdXRsaW5lIixvbjp7ImNsaWNrIjpmdW5jdGlvbigkZXZlbnQpe3JldHVybiBfdm0udXBkYXRlVGVzdCgpfX19LFtfdm0uX3YoIiBVcGRhdGUgZXhlcmNpc2UgIildKSxfYygnYnV0dG9uJyx7c3RhdGljQ2xhc3M6Im10LTMgcm91bmRlZC1mdWxsIGJnLWdyYXktMTAwIGhvdmVyOmJnLXJlZC0yMDAgYm9yZGVyIGhvdmVyOmJvcmRlci1yZWQtMzAwIHAtMiBweC01IGFic29sdXRlIHJpZ2h0LTAgYm90dG9tLTAgZm9jdXM6b3V0bGluZS1ub25lIGZvY3VzOnNoYWRvdy1vdXRsaW5lIixvbjp7ImNsaWNrIjpmdW5jdGlvbigkZXZlbnQpe3JldHVybiBfdm0ucmVtb3ZlRXhlcmNpc2UoKX19fSxbX2MoJ2ltZycse3N0YXRpY0NsYXNzOiJ3LTUiLGF0dHJzOnsic3JjIjpyZXF1aXJlKCJAL2Fzc2V0cy9pY29ucy9kZWxldGVfYmluLnBuZyIpfX0pXSldKV0pOl92bS5fZSgpXSwxKTpfdm0uX2UoKSxfYygnYnV0dG9uJyx7c3RhdGljQ2xhc3M6Im10LTMgcm91bmRlZC1mdWxsIGJnLW9yYW5nZS00MDAgcC0yIHB4LTUgZm9jdXM6b3V0bGluZS1ub25lIGZvY3VzOnNoYWRvdy1vdXRsaW5lIixhdHRyczp7InR5cGUiOiJidXR0b24ifSxvbjp7ImNsaWNrIjpmdW5jdGlvbigkZXZlbnQpe3JldHVybiBfdm0uZ29CYWNrKCl9fX0sW192bS5fdigiIEdvIEJhY2sgIildKV0pXSldLDEpfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW2Z1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJpbmxpbmUtYmxvY2sgdy1mdWxsIG1heC13LXNjcmVlbi14bCJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6InRleHQtbGVmdCJ9LFtfYygnaDEnLHtzdGF0aWNDbGFzczoicC01IHRleHQtMnhsIG1kOnRleHQtM3hsIG1kOm1sLTMgZm9udC1zZW1pYm9sZCJ9LFtfdm0uX3YoIiBFeGVyY2lzZSBjb25maWd1cmF0aW9uICIpXSldKV0pfV0KCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}