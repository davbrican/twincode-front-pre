{"remainingRequest":"F:\\TWINCODE\\twincode-front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\TWINCODE\\twincode-front\\src\\pages\\Playground.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"F:\\TWINCODE\\twincode-front\\src\\pages\\Playground.vue","mtime":1630919205994},{"path":"F:\\TWINCODE\\twincode-front\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\TWINCODE\\twincode-front\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"F:\\TWINCODE\\twincode-front\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"F:\\TWINCODE\\twincode-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\TWINCODE\\twincode-front\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQouQ29kZU1pcnJvciB7DQogIGJvcmRlcjogMXB4IHNvbGlkICNlZWU7DQogIGhlaWdodDogNTB2aCAhaW1wb3J0YW50Ow0KfQ0KI3BhaXJDdXJzb3Igew0KICB3aWR0aDogMnB4Ow0KICBoZWlnaHQ6IDE5cHg7DQogIHotaW5kZXg6IDk5OTk7DQp9DQo="},{"version":3,"sources":["Playground.vue"],"names":[],"mappingsqvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Playground.vue","sourceRoot":"src/pages","sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"container h-screen mx-auto\" v-if=\"!finished\">\r\n      <div class=\"shadow w-full bg-grey-light h-3\">\r\n        <div\r\n          ref=\"timeBar\"\r\n          class=\"bg-green-500 text-xs leading-none py-1 text-center text-white h-3\"\r\n          style=\"transition: 1s; width: 100%;\"\r\n        ></div>\r\n      </div>\r\n      <div v-if=\"exerciseType == 'DEMO'\" >\r\n          <div class=\"m-3 p-1 bg-yellow-200 border border-yellow-700 rounded-sm\">\r\n            <a class=\"ml-2 text-sm text-yellow-900 underline cursor-pointer\" @click=\"exitDemo()\">Click here to end the demo.</a>\r\n          </div>\r\n      </div>\r\n      <div class=\"flex h-full flex-wrap\">\r\n        <div class=\"w-2/3 p-2\">\r\n          <div>{{ (maxTime - timePassed) | secondsToString }}</div>\r\n          <div v-html=\"exerciseDescription\"></div>\r\n          <div style=\"height: 70vh;\" @keyup.ctrl.83=\"validate\" >\r\n            <div\r\n              ref=\"pairCursor\"\r\n              id=\"pairCursor\"\r\n              class=\"absolute bg-yellow-500 hidden\"\r\n            ></div>\r\n            <br/>\r\n            <pre><p class=\"text-purple-800 inline\">function</p> main(inputs) {</pre>\r\n            <codemirror\r\n              ref=\"cmEditor\"\r\n              v-model=\"code\"\r\n              id=\"codemirror\"\r\n              :options=\"cmOption\"\r\n              :events=\"['inputRead', 'change']\"\r\n            ></codemirror>\r\n        <pre style=\"visibility: hidden;\" id=\"codePre\">{{code}}</pre>\r\n        <pre style=\"visibility: hidden;\" id=\"listInputs\">{{inputs}}</pre>\r\n            <pre>     <p class=\"text-pink-700 inline\">return</p> outputs;</pre>\r\n            <pre>}</pre>\r\n            <br/>\r\n          </div>\r\n          <div\r\n            v-if=\"isExerciseCorrect\"\r\n            class=\"flex bg-green-200 p-3 mt-5 rounded-md border text-gray-800\"\r\n          >\r\n            <p class=\"mt-1 text-black-900\">\r\n              You got it right! Value returned: {{ returnValue }} <br/> Quality Score: <strong>{{ twcc }}</strong> (the lower the better)\r\n            </p>\r\n            <div class=\"flex-grow text-right\">\r\n              <button @click=\"clearResult\">\r\n                <img\r\n                  class=\"w-4\"\r\n                  src=\"https://img.icons8.com/small/32/000000/close-window.png\"\r\n                />\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          <div\r\n            v-if=\"isExerciseCorrect === false\"\r\n            class=\"bg-red-200 p-3 rounded-md border text-gray-800 relative\"\r\n          >\r\n            <p>Sorry, this is not the right solution. Try again!</p>\r\n            <p class=\"mt-1 text-red-900\">\r\n              Value returned: {{ excerciseErrorMessage || returnValue }}\r\n            </p>\r\n            <div class=\"absolute top-0 right-0 mt-1 mr-1\">\r\n              <button @click=\"clearResult\">\r\n                <img\r\n                  class=\"w-4\"\r\n                  src=\"https://img.icons8.com/small/32/000000/close-window.png\"\r\n                />\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          <div v-if=\"returnValue\" class=\"p-3 bg-black text-white mt-2 rounded-md\">\r\n            <p>Your console log:</p>\r\n            <p class=\"mt-1 text-black-900\" v-for=\"log in logs\" :key=\"log\">\r\n              <pre>$> {{ log }} </pre>\r\n            </p>\r\n          </div>\r\n        <pre style=\"visibility: hidden;\" id=\"resultsToValidate\"></pre>\r\n\r\n          <div class=\"mt-2\" style=\"bottom: 5px;\">\r\n            <!--<button\r\n                class=\"bg-yellow-800 hover:bg-yellow-700 p-3 text-white shadow-md focus:outline-none focus:shadow-outline m-1\"\r\n                onClick=\"toggleControlMode();\"\r\n              >\r\n                Give control\r\n              </button>-->\r\n            <button\r\n              class=\"bg-teal-600 hover:bg-teal-500 p-3 text-white shadow-md focus:outline-none focus:shadow-outline m-1\"\r\n              @click=\"validate()\"\r\n            >\r\n              Validate in js\r\n            </button>\r\n\r\n          <button\r\n            class=\"bg-orange-600 hover:bg-orange-500 p-3 text-white shadow-md focus:outline-none focus:shadow-outline m-1\"\r\n            @click=\"validPython()\"\r\n          >\r\n            Validate in python\r\n          </button>\r\n          </div>\r\n          <div id=\"return\"></div>\r\n          <div id=\"result\"></div>\r\n        </div>\r\n        <div class=\"w-1/3 h-full p-2\">\r\n          <div class=\"bg-gray-100 h-full p-2 flex flex-col-reverse\">\r\n            <div class=\"order-4 h-2/6\">\r\n              <img class=\"w-12 inline\" src=\"@/assets/chat.png\" />\r\n              <p class=\"text-2xl inline pl-3 mt-2 text-teal-900\">\r\n                Chat\r\n              </p>\r\n              <p class=\"p-3\">This is a place to chat with your peer</p>\r\n            </div>\r\n            <div\r\n              class=\"flex-grow p-3 order-2 h-3/6 overflow-auto w-full\"\r\n              ref=\"messageContainer\"\r\n            ></div>\r\n            <div class=\"p-3 order-1 h-1/6\">\r\n              <textarea\r\n                :disabled=\"exerciseType != 'PAIR'\"\r\n                v-model=\"myMessage\"\r\n                class=\"border resize-none w-full text-sm p-2\"\r\n                placeholder=\"Write message here and press ENTER\"\r\n                v-on:keyup.enter=\"sendMessage()\"\r\n              >\r\n              </textarea>\r\n              <p class=\"text-xs text-gray-600\">\r\n                Press ENTER to send Message\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div\r\n      v-if=\"finished\"\r\n      class=\"container mx-auto h-screen flex justify-center items-center\"\r\n    >\r\n      <div class=\"max-w-lg\">\r\n        <h1 class=\"mb-6 text-center font-hairline text-3xl\">\r\n          Session is over\r\n        </h1>\r\n        <div\r\n          class=\"bg-teal-100 border-teal-600 p-8 border-t-8 bg-white mb-6 rounded-md shadow-lg m-5\"\r\n        >\r\n          <h1 class=\"font-bold text-2xl mb-4\">Congratulations!</h1>\r\n          <p class=\"font-medium\" v-html=\"finishMessage\">\r\n          </p>\r\n        </div>\r\n        <div class=\"text-center\">\r\n          <p class=\"text-grey-dark text-sm inline\">\r\n            Universidad de Sevilla\r\n          </p>\r\n          <p class=\"text-grey-dark text-sm inline font-hairline mr-1 ml-1\">|</p>\r\n          <p class=\"text-grey-dark text-sm inline\">\r\n            University of California, Berkeley\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div\r\n      v-if=\"starting\"\r\n      class=\"fixed h-full w-full top-0 z-50 flex justify-center items-center\"\r\n      style=\"backdrop-filter: blur(2px);\"\r\n    >\r\n      <img src=\"@/assets/tc_color.png\" class=\"w-48\" />\r\n    </div>\r\n    <div\r\n      v-if=\"loadingTest\"\r\n      class=\"fixed h-full w-full top-0 z-50 flex justify-center items-center\"\r\n      style=\"backdrop-filter: blur(2px);\"\r\n    >\r\n      <div\r\n        class=\"border-teal-600 p-8 border-t-8 bg-white mb-6 rounded-md shadow-lg m-5 w-2/3\"\r\n      >\r\n        <h1 class=\"font-bold text-2xl mb-4\">A new test begins!</h1>\r\n        <h2 class=\"font-bold text-xl text-gray-600\">\r\n          {{ (maxTime - timePassed) | secondsToString }}\r\n        </h2>\r\n        <p class=\"font-medium\" v-html=\"testDescription\"></p>\r\n        <p class=\"font-normal mt-1\">Your ID: {{ token }}</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Vue from \"vue\";\r\nimport Message from \"../components/Message\";\r\nimport { codemirror } from \"vue-codemirror\";\r\nimport \"codemirror/mode/javascript/javascript.js\";\r\nimport \"codemirror/lib/codemirror.css\";\r\n\r\nfunction dbg(msg, obj, fields) {\r\n  \r\n  function replacer(key, value) {\r\n    const originalObject = this[key];\r\n    if(originalObject instanceof Map) {\r\n      return {\r\n        dataType: 'Map',\r\n        value: Array.from(originalObject.entries()), \r\n      };\r\n    } else {\r\n      return value;\r\n    }\r\n  }\r\n\r\n  if(obj){\r\n    if(fields && Array.isArray(fields)){\r\n      var logObj = {};\r\n      for (const field in obj) {\r\n        if(fields.includes(field))\r\n          logObj[field] = obj[field];\r\n      }       \r\n      console.log(\"DEBUG - \"+msg+\" <\"+JSON.stringify(logObj,replacer).slice(0, -1)+\",...}>\"); \r\n    }else{\r\n      console.log(\"DEBUG - \"+msg+\" <\"+JSON.stringify(obj,replacer)+\">\");\r\n    }\r\n\r\n  } else{\r\n      console.log(\"DEBUG - \"+msg);\r\n  }\r\n\r\n}\r\n\r\nexport default {\r\n  components: {\r\n    codemirror,\r\n  },\r\n  data() {\r\n    return {\r\n      code: ``,\r\n      cmOption: {\r\n        tabSize: 4,\r\n        styleActiveLine: true,\r\n        lineNumbers: true,\r\n        mode: \"text/javascript\",\r\n      },\r\n      firstLoad: true,\r\n      awaiting: null,\r\n      cursorLeftPosition: 0,\r\n      cursorTopPosition: 0,\r\n      myMessage: \"\",\r\n      uid: \"\",\r\n      rid: \"\",\r\n      lastReceived: \"\",\r\n      exerciseDescription: \"Please, wait until the exercise loads...\",\r\n      exerciseLoaded: false,\r\n      exerciseType: \"PAIR\",\r\n      testDescription: \"\",\r\n      finished: false,\r\n      starting: true,\r\n      loadingTest: false,\r\n      peerChange: false,\r\n      timeInterval: null,\r\n      maxTime: 0,\r\n      timePassed: 0,\r\n      isExerciseCorrect: null,\r\n      twcc:null,\r\n      excerciseErrorMessage: \"\",\r\n      returnValue: \"\",\r\n      token: localStorage.getItem(\"code\"),\r\n      println: window.println,\r\n      logs: window.logs,\r\n      inputs: null,\r\n      solutions: [1,4,9,16],\r\n      peerSocketId: null,\r\n      updateCodeEventActive: true\r\n    };\r\n  },\r\n  filters: {\r\n    secondsToString: function(value) {\r\n      const minutes = Math.floor(value / 60);\r\n      const seconds = value - minutes * 60;\r\n\r\n      return `${minutes}:${(\"0\" + seconds).slice(-2)}`;\r\n    },\r\n  },\r\n  sockets: {\r\n    msg(pack) {\r\n      dbg(\"EVENT msg\",pack);\r\n      if (pack.uid != this.uid && pack.rid == this.rid) {\r\n        console.log(\r\n          \"newMsg event triggered with data <\" + this.toJSON(pack) + \"> \"\r\n        );\r\n        this.newMessage(pack.data, false);\r\n      }\r\n    },\r\n    refreshCode(pack) {\r\n      dbg(\"EVENT refreshCode\",pack);\r\n\r\n      // Too expensive Debug log\r\n      //console.log(\"text event triggered with data <\" + this.toJSON(pack) + \"> \");\r\n\r\n      this.$refs.cmEditor.codemirror.replaceRange(\r\n        pack.change.text,\r\n        pack.change.from,\r\n        pack.change.to,\r\n        \"server\"\r\n      );\r\n     \r\n    },\r\n    finish() {\r\n      dbg(\"EVENT finish\");\r\n      console.log(\"EVENT finish trigered!\");\r\n      fetch(\r\n        process.env.VUE_APP_TC_API + \"/finishMessage?code=\" + localStorage.code,\r\n        {\r\n          method: \"GET\",\r\n        }\r\n      )\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((response) => {\r\n          this.finished = true;\r\n          this.finishMessage = response.finishMessage;\r\n          this.$socket.client.emit(\"clientFinished\", {token: localStorage.token, code: localStorage.code});\r\n        });\r\n    },\r\n    loadTest(pack) {\r\n      dbg(\"EVENT loadTest\",pack);\r\n      this.finished = false;\r\n      this.loadingTest = true;\r\n      this.starting = false;\r\n      this.testDescription = pack.data.testDescription;\r\n      this.peerChange = pack.data.peerChange;\r\n      this.$refs.messageContainer.innerHTML = \"\";\r\n      this.code = \"\";\r\n      this.clearResult();\r\n    },\r\n    cursorActivity(data) {\r\n      dbg(\"EVENT cursorActivity\",data);      \r\n      this.cursorLeftPosition = data.left;\r\n      this.cursorTopPosition = data.top;\r\n      this.updateCursorLocation();\r\n    },\r\n    newExercise(pack) {\r\n      dbg(\"EVENT newExercise\",pack);  \r\n\r\n      this.loadingTest = false;\r\n      this.starting = false;\r\n      this.timePassed = 0;\r\n      this.isExerciseCorrect = null;\r\n      this.$refs.timeBar.style.width = \"100%\";\r\n      this.$refs.timeBar.classList.remove(\"bg-red-500\");\r\n      this.$refs.timeBar.classList.add(\"bg-green-500\");\r\n      this.exerciseDescription = pack.data.exerciseDescription;\r\n      this.exerciseType = pack.data.exerciseType;\r\n      this.maxTime = pack.data.maxTime;\r\n      this.inputs = pack.data.inputs;\r\n      this.clearResult();\r\n    },\r\n    reconnect() {\r\n      dbg(\"EVENT reconnect\");\r\n      this.$socket.client.emit(\"clientReconnection\", localStorage.token);\r\n    },\r\n    countDown(pack) {\r\n      //dbg(\"EVENT countDown\",pack);\r\n      this.timePassed = this.maxTime - pack.data;\r\n      let factor = 100 / this.maxTime;\r\n      let width = parseFloat(this.$refs.timeBar.style.width, 10) - factor;\r\n      this.$refs.timeBar.style.width = width + \"%\";\r\n      if (width < 20) {\r\n        this.$refs.timeBar.classList.remove(\"bg-yellow-500\");\r\n        this.$refs.timeBar.classList.add(\"bg-red-500\");\r\n      } else if (width < 40) {\r\n        this.$refs.timeBar.classList.remove(\"bg-green-500\");\r\n        this.$refs.timeBar.classList.add(\"bg-yellow-500\");\r\n      }\r\n    },\r\n    requestBulkCodeEvent(peerSocketId){\r\n      dbg(\"EVENT requestBulkCodeEvent\");\r\n      var currentCode =  this.$refs.cmEditor.codemirror.getValue();\r\n      dbg(\"EVENT requestBulkCodeEvent - code : \\\"\"+currentCode+\"\\\"\");\r\n      if(this.peerSocketId != peerSocketId){\r\n        this.peerSocketId = peerSocketId;\r\n        this.$socket.client.emit(\"bulkCode\", this.pack({\r\n          peerSocketId:peerSocketId, \r\n          code: currentCode\r\n        }));\r\n\r\n      }else{\r\n        dbg(\"EVENT requestBulkCodeEvent - IGNORED because peerSocketId didn't changed\");\r\n      }\r\n    },\r\n    bulkCodeUpdate(code){\r\n      dbg(\"EVENT bulkCodeUpdate\",code);\r\n      var currentCode =  this.$refs.cmEditor.codemirror.getValue();\r\n      console.log\r\n      if(currentCode != code){\r\n        this.updateCodeEventActive = false;\r\n        this.$refs.cmEditor.codemirror.setValue(code);\r\n        this.updateCodeEventActive = true;\r\n\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    dbg(\"created - init\");\r\n    var pathParams = window.location.pathname.split(\"/\");\r\n    this.rid = pathParams[3] + \":\" + pathParams[2];\r\n\r\n    this.uid = new String(\r\n      new Date().getTime() + new Date().getUTCMilliseconds()\r\n    ).substr(8, 13);\r\n\r\n    this.$socket.client.emit(\"clientReconnection\", localStorage.token);\r\n  },\r\n  watch: {\r\n    cursorTopPosition: function(val) {\r\n      console.log(val);\r\n    },\r\n    cursorLeftPosition: function(val) {\r\n      console.log(val);\r\n    },\r\n  },\r\n  methods: {\r\n    sendMessage() {\r\n      dbg(\"method sendMessage - init\",this.myMessage);\r\n      if (this.exerciseType == \"PAIR\") {\r\n        this.newMessage(this.myMessage, true);\r\n        this.$socket.client.emit(\"msg\", this.pack(this.myMessage));\r\n\r\n        this.myMessage = \"\";\r\n      }\r\n    },\r\n    newMessage(msg, mine) {\r\n      dbg(\"method newMessage - init\",msg);\r\n      const MessageClass = Vue.extend(Message);\r\n      let gender = localStorage.getItem(\"pairedTo\") === 'Female';\r\n      gender = this.peerChange ? !gender : gender;\r\n      gender = JSON.parse(localStorage.getItem(\"user\")).blind ? null : gender;\r\n      const msgInstance = new MessageClass({\r\n        propsData: {\r\n          mine: mine,\r\n          message: msg,\r\n          girl: gender,\r\n        },\r\n      });\r\n\r\n      msgInstance.$mount();\r\n      this.$refs.messageContainer.appendChild(msgInstance.$el);\r\n\r\n      var container = this.$refs.messageContainer;\r\n      container.scrollTop = container.scrollHeight;\r\n    },\r\n    validPython() {\r\n      document.getElementById(\"brythonButton\").click();\r\n      //console.log(this.solutions+\"          \"+document.getElementById(\"resultsToValidate\").innerHTML);\r\n\r\n      var solutionsCompiled = document.getElementById(\"resultsToValidate\").innerHTML;\r\n\r\n      /*\r\n      if(document.getElementById(\"resultsToValidate\").innerHTML == this.solutions+\"\") {\r\n        document.getElementById(\"resultsToValidate\").innerHTML = \"Your answer is correct!\"\r\n        document.getElementById(\"resultsToValidate\").style = \"visibility: visible; background-color: hsla(89, 43%, 51%, 0.3); border-radius: 7px; color: green; padding: 5px; margin-top: 7px\";\r\n      } else {\r\n        document.getElementById(\"resultsToValidate\").innerHTML = \"Your answer is not correct\"\r\n        document.getElementById(\"resultsToValidate\").style = \"visibility: visible; background-color: hsla(0, 100%, 51%, 0.3); border-radius: 7px; color: red; padding: 5px; margin-top: 7px\";\r\n      }\r\n      */\r\n      try {\r\n        var toValidate = [];\r\n        //console.log(solutionsCompiled.split(\",\"));\r\n        for(var s = 0; s < solutionsCompiled.split(\",\").length; s++) {\r\n          var t = solutionsCompiled.split(\",\")[s];\r\n          //console.log(t);\r\n\r\n          var sol = Number(t); \r\n          if (isNaN(sol)) {\r\n            sol = t.toLowerCase();\r\n            var sol2 = (sol == 'true' || sol == 'false');\r\n            if (sol2 == false) {\r\n              sol = t;\r\n            } else {\r\n              sol = t.toLowerCase() == 'true';\r\n            }\r\n          }\r\n          toValidate.push(sol);\r\n        }\r\n        //console.log(toValidate);\r\n        this.valid(toValidate);\r\n      } catch (e) {\r\n        this.isExerciseCorrect = false;\r\n        this.excerciseErrorMessage = e;\r\n        console.log(\"ERROR HERE: \", e);\r\n      }\r\n      /*Example:\r\n      outputs = []\r\n      for i in inputs:\r\n        outputs.append(i*i)\r\n      */\r\n    },\r\n    validate() {\r\n      dbg(\"method validate - init\",this.code);\r\n      this.clearResult();\r\n      try {\r\n        var solutions = [];\r\n\r\n        this.inputs.forEach(input => {\r\n          solutions.push(eval(\"var inputs=\"+JSON.stringify(input)+\";\" + this.code + \"; outputs;\"));\r\n        });\r\n\r\n        console.log(\"Inputs: \"+JSON.stringify(this.inputs));\r\n        console.log(\"Outputs: \"+JSON.stringify(solutions));\r\n        \r\n        console.log(solutions);\r\n\r\n        this.valid(solutions);\r\n\r\n        /*if (ret) {\r\n          this.valid(ret);\r\n        } else {\r\n          this.isExerciseCorrect = false;\r\n          this.excerciseErrorMessage = \"You should return the solution.\";\r\n        }*/\r\n      } catch (e) {\r\n        this.isExerciseCorrect = false;\r\n        this.excerciseErrorMessage = e;\r\n        console.log(\"ERROR HERE: \", e);\r\n      }\r\n    },\r\n    clearResult() {\r\n      dbg(\"method clearResult - init\");\r\n      this.isExerciseCorrect = null;\r\n      this.excerciseErrorMessage  = \"\";\r\n      this.returnValue = \"\";\r\n      this.errorMessage = \"\";\r\n      window.logs = [];\r\n      this.logs = window.logs;\r\n    },\r\n    valid(v) {\r\n      dbg(\"method valid - init\",v);\r\n      if (this.exerciseType != 'DEMO') {\r\n        fetch(process.env.VUE_APP_TC_API + \"/verify\", {\r\n          method: \"POST\",\r\n          body: JSON.stringify({\r\n            solutions: v,\r\n            user: localStorage.token,\r\n            source: \"function main(inputs) { \"+\r\n                        this.$refs.cmEditor.codemirror.getValue()+\r\n                        \"return outputs;\"+\r\n                    \"}\"\r\n          }),\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }).then((response) => {\r\n          if (response.status == 200) {\r\n            response.json().then((data) => {\r\n              this.isExerciseCorrect = data.result;\r\n              this.twcc = data.twcc;\r\n              this.returnValue = v;\r\n            });\r\n          }\r\n        });\r\n      } else {\r\n        this.isExerciseCorrect = JSON.parse(localStorage.demoExercise).solution === v;\r\n        this.returnValue = v;\r\n      }\r\n    },\r\n    onCmBlur(cm) {\r\n      console.log(\"cm blur!\", cm);\r\n    },\r\n    onCmFocus(cm) {\r\n      console.log(\"cm focus!\", cm);\r\n    },\r\n    onCmReady(cm) {\r\n      console.log(\"cm ready!\", cm);\r\n    },\r\n    exitDemo() {\r\n      dbg(\"method exitDemo - init\");\r\n      clearInterval(this.timeInterval);\r\n      this.$router.go(-1);\r\n    },\r\n    loadDemoExercise() {\r\n      dbg(\"method loadDemoExercise - init\");\r\n      const demoExercise = JSON.parse(localStorage.demoExercise);\r\n      this.starting = false;\r\n      this.maxTime = demoExercise.time;\r\n      this.exerciseDescription = demoExercise.description;\r\n      this.exerciseType = \"DEMO\"\r\n      this.timeInterval = setInterval(() => {\r\n        this.timePassed++;\r\n        console.log(\"Counting down!\");\r\n        let factor = 100 / this.maxTime;\r\n        let width = parseFloat(this.$refs.timeBar.style.width, 10) - factor;\r\n        this.$refs.timeBar.style.width = width + \"%\";\r\n        if (width < 20) {\r\n          this.$refs.timeBar.classList.remove(\"bg-yellow-500\");\r\n          this.$refs.timeBar.classList.add(\"bg-red-500\");\r\n        } else if (width < 40) {\r\n          this.$refs.timeBar.classList.remove(\"bg-green-500\");\r\n          this.$refs.timeBar.classList.add(\"bg-yellow-500\");\r\n        }\r\n        if (this.timePassed > this.maxTime) {\r\n          clearInterval(this.timeInterval);\r\n        }\r\n      },1000);\r\n    },\r\n    pack(data) {\r\n      dbg(\"method pack - init\",data);\r\n      return {\r\n        rid: this.rid,\r\n        uid: this.uid,\r\n        token: localStorage.token,\r\n        data: data,\r\n      };\r\n    },\r\n    toJSON(obj) {\r\n      return JSON.stringify(obj, null, 2);\r\n    },\r\n    evaluateCode(code) {\r\n      eval(code);\r\n    },\r\n    handleResize() {\r\n      const elemento = document.getElementsByClassName(\"CodeMirror-scroll\")[0];\r\n      const newLeft =\r\n        document.getElementById(\"codemirror\").getBoundingClientRect().left +\r\n        this.cursorLeftPosition +\r\n        30 -\r\n        elemento.scrollLeft;\r\n      document.getElementById(\"pairCursor\").style.left = newLeft + \"px\";\r\n    },\r\n    handleScroll() {\r\n      const cmWidth = document.getElementById(\"codemirror\").offsetWidth;\r\n      const cmHeight = document.getElementById(\"codemirror\").offsetHeight + 19;\r\n\r\n      const elemento = document.getElementsByClassName(\"CodeMirror-scroll\")[0];\r\n      const newTop =\r\n        document.getElementById(\"codemirror\").getBoundingClientRect().top +\r\n        this.cursorTopPosition +\r\n        5 -\r\n        elemento.scrollTop;\r\n\r\n      const newLeft =\r\n        document.getElementById(\"codemirror\").getBoundingClientRect().left +\r\n        this.cursorLeftPosition +\r\n        30 -\r\n        elemento.scrollLeft;\r\n      if (cmWidth > newLeft) {\r\n        this.$refs.pairCursor.style.left = newLeft + \"px\";\r\n      }\r\n      if (cmHeight > newTop) {\r\n        this.$refs.pairCursor.style.top = newTop + \"px\";\r\n      }\r\n\r\n      console.log(elemento.scrollTop);\r\n    },\r\n    inputRead(i, c) {\r\n      if(this.updateCodeEventActive)\r\n        this.$socket.client.emit(\"updateCode\", c);\r\n    },\r\n    cursorActivity(doc) {\r\n      dbg(\"method cursorActivity - init\");\r\n      this.$socket.client.emit(\r\n        \"cursorActivity\",\r\n        doc.cursorCoords(false, \"relative\")\r\n      );\r\n    },\r\n    onCmCodeChange(e, c) {\r\n      const changeObj = {\r\n        author: this.$socket.client.id,\r\n        change: c,\r\n      };\r\n      if (c.origin != \"server\") {\r\n        if(this.updateCodeEventActive)\r\n          this.$socket.client.emit(\"updateCode\", this.pack(changeObj));\r\n      }\r\n      this.firstLoad = false;\r\n    },\r\n    updateCursorLocation() {\r\n      const cmWidth = document.getElementById(\"codemirror\").offsetWidth;\r\n      const cmHeight = document.getElementById(\"codemirror\").offsetHeight;\r\n      console.log(cmHeight);\r\n\r\n      const elemento = document.getElementsByClassName(\"CodeMirror-scroll\")[0];\r\n\r\n      const top =\r\n        document.getElementById(\"codemirror\").getBoundingClientRect().top +\r\n        this.cursorTopPosition +\r\n        5 -\r\n        elemento.scrollTop;\r\n      const left =\r\n        document.getElementById(\"codemirror\").getBoundingClientRect().left +\r\n        this.cursorLeftPosition +\r\n        30 -\r\n        elemento.scrollLeft;\r\n      console.log(top);\r\n      console.log(cmHeight);\r\n      if (cmWidth > left) {\r\n        this.$refs.pairCursor.style.left = left + \"px\";\r\n      }\r\n      if (cmHeight > top) {\r\n        this.$refs.pairCursor.style.top = top + \"px\";\r\n      }\r\n    },\r\n  },\r\n  computed: {\r\n    cmEditor() {\r\n      return this.$refs.cmEditor.codemirror;\r\n    },\r\n  },\r\n  mounted() {\r\n    dbg(\"mounted - init\");\r\n\r\n    this.$refs.cmEditor.codemirror.on(\"change\", this.onCmCodeChange);\r\n    this.$refs.cmEditor.codemirror.on(\"cursorActivity\", this.cursorActivity);\r\n    const elemento = document.getElementsByClassName(\"CodeMirror-scroll\")[0];\r\n    elemento.addEventListener(\"scroll\", this.handleScroll);\r\n\r\n    // Cursor functionaliy disabled\r\n    /*let toggle = true;\r\n    setInterval(function() {\r\n      if (toggle) {\r\n        document.getElementById(\"pairCursor\").classList.add(\"invisible\");\r\n      } else {\r\n        document.getElementById(\"pairCursor\").classList.remove(\"invisible\");\r\n      }\r\n      toggle = !toggle;\r\n    }, 750);*/\r\n\r\n    // Disable ctrl+s shortkey in Windows or Linux\r\n    document.body.addEventListener('keydown', event => {\r\n     if (event.ctrlKey || event.metaKey) {\r\n      switch (String.fromCharCode(event.which).toLowerCase()) {\r\n        case \"s\":\r\n          event.preventDefault();\r\n          break;\r\n      }\r\n     }\r\n    });\r\n\r\n    this.$refs.timeBar.style.width = `${((this.maxTime - this.timePassed) /\r\n      this.maxTime) *\r\n      100}%`;\r\n\r\n    if (localStorage.demoExercise) {\r\n      this.loadDemoExercise();\r\n    }\r\n  },\r\n  beforeDestroy() {\r\n    dbg(\"beforeDestroy - init\");\r\n    window.removeEventListener(\"resize\", this.handleScroll);\r\n    const elemento = document.getElementsByClassName(\"CodeMirror-scroll\")[0];\r\n    if (elemento) {\r\n      elemento.removeEventListener(\"scroll\", this.handleScroll);\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n.CodeMirror {\r\n  border: 1px solid #eee;\r\n  height: 50vh !important;\r\n}\r\n#pairCursor {\r\n  width: 2px;\r\n  height: 19px;\r\n  z-index: 9999;\r\n}\r\n</style>\r\n"]}]}